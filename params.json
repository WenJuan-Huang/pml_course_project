{"name":"Pml course project","tagline":"This project is about predict people's excises habits using machine learning algorithm learnt from coursera practical machine learning course ","body":"## Practical Mechine Learning Course Project Writeup\r\n\r\n### Background\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively.\r\nThese type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks.\r\nOne thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it.\r\nIn this project, the goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants.\r\nThey were asked to perform barbell lifts correctly and incorrectly in 5 different ways. \r\nMore information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).\r\n\r\n### Download training and testing data files\r\n```r \r\ndownload.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\", destfile = \"pml-training.csv\")\r\ndownload.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\", destfile = \"pml-testing.csv\")\r\n```\r\n\r\n### Pre-processing data\r\nThe goal of pre-processing data is to obtain a set of concise predictors for the machine learning prediction. \r\nThe data cleaning process apply to both training and testing data sets.\r\n\r\nRead the raw data and set the classe as factor. \r\n```r\r\nlibrary(caret)\r\ndata <- read.csv(\"pml-training.csv\", stringsAsFactors=FALSE)\r\ndata$classe <- as.factor(data$classe)\r\ndata_test <- read.csv(\"pml-testing.csv\", stringsAsFactors=FALSE)\r\n``` \r\n\r\nThen clean the data: \r\n\r\na. Removing columns with features not related to precition outcomes (first 7 columns)\r\n```r\r\ndata <- data[,-c(1:7)]\r\ndata_test <- data_test[,-c(1:7)]\r\n```\r\nb. Removing columns with too little data that are not valuable enough in prediction\r\n```r\r\ndata <- data[,-nearZeroVar(data)]\r\ndata_test <- data_test[,-nearZeroVar(data_test)]\r\n```\r\nc. Removing columns with too many NAs (>90%)\r\n\r\nfunction 1: 'def_NAs' define variables with na > 90% \r\n```r\r\ndef_NAs <- function(value){\r\n        if(sum(is.na(value))/length(value) > 0.9){ # if vector is made of more than 90% NAs\r\n                res <- TRUE;                             # return true\r\n        }else{                                       # if it doesn't\r\n                res <- FALSE;                            # return false\r\n        }\r\n        invisible(res);                              # return a invisible copy of the results\r\n}\r\n```\r\nApply the function on the pml-training data\r\n```r\r\nvars_90NAs <- sapply(data, def_NAs) # find columns with NA > 90%\r\ndata <- data[,!vars_90NAs] # no NA in data anymore in this case\r\n```\r\nApply the function on the pml-testing data \r\n```r\r\nvars_90NAs_test <- sapply(data_test, def_NAs) \r\ndata_test <- data_test[,!vars_90NAs_test] \r\n```\r\n\r\n### Prediction and Cross-validation\r\n\r\nSplit the cleaned training data into training and testing sets. \r\nUse \"random forest\" algorithm in caret package and all other variables in the training set in the model training.\r\nApply the modelFit on the testing set for cross-validation.\r\n```r\r\ninTrain <- createDataPartition(y=data$classe, p= 0.7, list=FALSE)\r\ntraining <- data[inTrain,]\r\ntesting <- data[-inTrain,]\r\nmodelFit <- train(training$classe ~., data = training, method = \"rf\")\r\ntest <- predict(modelFit, newdata = testing)\r\nconfusionMatrix(testing$classe, test)\r\n```\r\nResults and analysis: \r\n\r\nThe cross-validation shows the accuracy of this model is 0.9941. \r\nTherefore, the out of sample error is (1 - Accuracy) = 0.0059.\r\n```r\r\nConfusion Matrix and Statistics\r\n\r\n          Reference\r\nPrediction    A    B    C    D    E\r\n         A 1674    0    0    0    0\r\n         B    8 1129    2    0    0\r\n         C    0    3 1016    7    0\r\n         D    0    0   10  953    1\r\n         E    0    0    2    2 1078\r\n\r\nOverall Statistics\r\n                                          \r\n               Accuracy : 0.9941          \r\n                 95% CI : (0.9917, 0.9959)\r\n    No Information Rate : 0.2858          \r\n    P-Value [Acc > NIR] : < 2.2e-16       \r\n                                          \r\n                  Kappa : 0.9925          \r\n Mcnemar's Test P-Value : NA              \r\n\r\nStatistics by Class:\r\n\r\n                     Class: A Class: B Class: C Class: D Class: E\r\nSensitivity            0.9952   0.9973   0.9864   0.9906   0.9991\r\nSpecificity            1.0000   0.9979   0.9979   0.9978   0.9992\r\nPos Pred Value         1.0000   0.9912   0.9903   0.9886   0.9963\r\nNeg Pred Value         0.9981   0.9994   0.9971   0.9982   0.9998\r\nPrevalence             0.2858   0.1924   0.1750   0.1635   0.1833\r\nDetection Rate         0.2845   0.1918   0.1726   0.1619   0.1832\r\nDetection Prevalence   0.2845   0.1935   0.1743   0.1638   0.1839\r\nBalanced Accuracy      0.9976   0.9976   0.9922   0.9942   0.9991\r\n```\r\n\r\n### Final predictions on data_test from \"pml-testing.csv\" file\r\n```r\r\nprediction <- predict(modelFit, newdata = data_test)\r\nprediction\r\n [1] B A B A A E D B A A B C B A E E A B B B\r\nLevels: A B C D E\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}